// # Block Grid using CSS Grid //
// # Example Usage
//
// To produce a grid of 2 items per row on an extra-small screen, and 3 items
// per row on a small screen:
//
//     <div class="block-grid-xs-2 block-grid-sm-3">
//         <div class="block-grid-item">
//             ...
//         </div>
//     </div>
.block-grid,
[class*="block-grid-"] {
  display: grid;
  margin: 0 0 12px;
  padding: 0;
  grid-gap: 12px;
  width: 100%;
  @media (min-width: @screen-md) {
	  margin: 0 0 var(--s2);
  		grid-gap: var(--s2);
  }
  .block-grid-item {
    display: block;
    margin: 0;  
    padding: 0;
    height: auto;
    width: 100%;
    list-style: none;  // for those who like to use `li` elements as block-grid-items
  }
  &.nopad {
	  grid-gap:0;
	  margin: 0;
  }
}

.block-grid (@per-row) {
	grid-template-columns: repeat(@per-row, 1fr);
}

// Recursive loop that produces rules for block grids of @per-row many items
// per row down to 1 many items per row.
.block-grids(@size, @per-row: @grid-columns) when (@per-row > 0) {
  .block-grid-@{size}-@{per-row} { .block-grid(@per-row); }
  .block-grids(@size, (@per-row - 1));
}

.block-grids(xs);
@media (min-width: @screen-sm-min) { .block-grids(sm) }
@media (min-width: @screen-md-min) { .block-grids(md) }
@media (min-width: @screen-lg-min) { .block-grids(lg) }


.aspect-ratio(@width, @height) {
  position: relative;
  &:after {
    display: block;
    content: "";
    width: 100%;
    padding-top: (@height / @width) * 100%;
  }
  > div {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}