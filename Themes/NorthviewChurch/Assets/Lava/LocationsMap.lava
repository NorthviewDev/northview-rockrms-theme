<div id="campus-locations">
  <div id="campusmap"></div>
</div>
<script type="text/javascript">
  // Style credit: https://snazzymaps.com/style/151/ultra-light-with-labels
  const mapStyle = [{"featureType":"water","elementType":"geometry","stylers":[{"color":"#e9e9e9"},{"lightness":17}]},{"featureType":"landscape","elementType":"geometry","stylers":[{"color":"#f5f5f5"},{"lightness":20}]},{"featureType":"road.highway","elementType":"geometry.fill","stylers":[{"color":"#ffffff"},{"lightness":17}]},{"featureType":"road.highway","elementType":"geometry.stroke","stylers":[{"color":"#ffffff"},{"lightness":29},{"weight":0.2}]},{"featureType":"road.arterial","elementType":"geometry","stylers":[{"color":"#ffffff"},{"lightness":18}]},{"featureType":"road.local","elementType":"geometry","stylers":[{"color":"#ffffff"},{"lightness":16}]},{"featureType":"poi","elementType":"geometry","stylers":[{"color":"#f5f5f5"},{"lightness":21}]},{"featureType":"poi.park","elementType":"geometry","stylers":[{"color":"#dedede"},{"lightness":21}]},{"elementType":"labels.text.stroke","stylers":[{"visibility":"on"},{"color":"#ffffff"},{"lightness":16}]},{"elementType":"labels.text.fill","stylers":[{"saturation":36},{"color":"#333333"},{"lightness":40}]},{"elementType":"labels.icon","stylers":[{"visibility":"off"}]},{"featureType":"transit","elementType":"geometry","stylers":[{"color":"#f2f2f2"},{"lightness":19}]},{"featureType":"administrative","elementType":"geometry.fill","stylers":[{"color":"#fefefe"},{"lightness":20}]},{"featureType":"administrative","elementType":"geometry.stroke","stylers":[{"color":"#fefefe"},{"lightness":17},{"weight":1.2}]}]
  
  // Escapes HTML characters in a template literal string, to prevent XSS.
  // See https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet#RULE_.231_-_HTML_Escape_Before_Inserting_Untrusted_Data_into_HTML_Element_Content
  function sanitizeHTML(strings) {
    const entities = {'&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', '\'': '&#39;'};
    let result = strings[0];
    for (let i = 1; i < arguments.length; i++) {
      result += String(arguments[i]).replace(/[&<>'"]/g, (char) => {
        return entities[char];
      });
      result += strings[i];
    }
    return result;
  }
  
  function initMap() {

		//create empty LatLngBounds object
		var bounds = new google.maps.LatLngBounds();
		
    var opts = {
        // How zoomed in you want the map to start at (always required)
        zoom: 9,

        // The latitude and longitude to center the map (always required)
        center: new google.maps.LatLng(39.9784, -86.1180), // Carmel, IN

        // How you would like to style the map. 
        // This is where you would paste any style found on Snazzy Maps.
        styles: mapStyle
        
    };

		opts.clickableIcons = false;
		opts.disableDoubleClickZoom = false;
		opts.draggable = true;
		opts.keyboardShortcuts = true;
		opts.scrollwheel = false;

		var setControlOptions = function(key, enabled, position, style, mapTypeIds){
			opts[key + 'Control'] = enabled;
			opts[key + 'ControlOptions'] = {
				position: google.maps.ControlPosition[position],
				style: google.maps.MapTypeControlStyle[style],
				mapTypeIds: mapTypeIds
			};
		};
			
		setControlOptions('fullscreen',false,'DEFAULT','',null);
		setControlOptions('mapType',true,'TOP_RIGHT','DEFAULT',null);
		setControlOptions('rotate',false,'DEFAULT','',null);
		setControlOptions('scale',false,'','',null);
		setControlOptions('streetView',false,'DEFAULT','',null);
		setControlOptions('zoom',true,'DEFAULT','',null);
		
    // Get the HTML DOM element that will contain your map 
    // We are using a div with id="map" seen below in the <body>
    var mapElement = document.getElementById('campusmap');

    // Create the Google Map using our element and options defined above
    var map = new google.maps.Map(mapElement, opts);

    // Load the campuses GeoJSON onto the map.
    map.data.loadGeoJson("https://new.northviewchurch.us/Webhooks/Lava.ashx/ActiveCampuses", {idPropertyName: 'campusid'});
  
    // Define the custom marker icons
    map.data.setStyle((feature) => {
      return {
        icon: {
  				url: "{{'Global' | Attribute:'PublicApplicationRoot'}}Themes/NorthviewChurch/Assets/_img/Location_Marker.png",
  				scaledSize: new google.maps.Size(
  					30,
  					30),
  				size: new google.maps.Size(
  					30,
  					30),
  				anchor: new google.maps.Point(
  					15,
  					30)
        },
      };
    });
    
{% comment %}/****
//moving all this into Lava Webhook at /Webhooks/Lava.ashx/ActiveCampuses
  {%- for campus in Campuses -%}
    {%- assign isActive = campus.IsActive -%}
    {%- assign hasLocation = campus.Location.Latitude -%}
  	{%- if isActive and hasLocation -%}
    {%- assign serviceDay = "" -%}
    
      // Let's add campus markers
			(function(){
				var markerOptions = {
					map: map,
					position: {
						lat: {{campus.Location.Latitude}},
						lng: {{campus.Location.Longitude}},
					}
				};
				
				markerOptions.icon = {
					url: "{{'Global' | Attribute:'PublicApplicationRoot'}}Themes/NorthviewChurch/Assets/_img/Location_Marker.png",
					scaledSize: new google.maps.Size(
						30,
						30),
					size: new google.maps.Size(
						30,
						30),
					anchor: new google.maps.Point(
						15,
						30)
				};
				markerOptions.options = {
					optimized: true,
				};
				
				var marker = new google.maps.Marker(markerOptions);

{%- assign serviceDay = "" -%}
{%- assign displayServiceTimes = "" -%}					
{%- assign serviceTimes = campus.ServiceTimes -%}
{%- capture displayServiceTimes -%}{%- for serviceTime in serviceTimes -%}{%- assign separator='' -%}{%- if forloop.length > 1 -%}{%- if forloop.last -%}{% assign separator=' and ' -%}{%- elseif forloop.first != true and serviceTime.Day == serviceDay -%}{% assign separator=', ' -%}{% endif -%}{%- endif -%}{%- if serviceTime.Day != serviceDay -%}<p>{{ serviceTime.Day | Pluralize}} at&nbsp;{%- assign serviceDay = serviceTime.Day -%}{%- endif -%}{{ separator }}{{ serviceTime.Time }}{%- endfor -%}{%- endcapture -%}
{%- assign campusLocation = campus.Location.Street1 | Trim -%}
{%- capture displayLocationLink -%}{%- if campusLocation != "" -%}<p class="location-link"><i class="nv-icon nv-icon--location_marker"></i><a target="_blank" href="https://www.google.com/maps/dir/?api=1&amp;destination={{campus.Location.Street1}}+{{campus.Location.City}}+{{campus.Location.State}}+{{campus.Location.PostalCode}}">Map & Directions</a></p>{%- endif -%}{%- endcapture -%}
          
          var infoWindow = new SnazzyInfoWindow({
						marker: marker,
						wrapperClass: 'ql-snow',
						placement: 'top',
						backgroundColor: '#fff',
						fontColor: '#000',
						content: '<div class="infowindow">' +
						'<div style="padding:20px"><h4>{{ campus.Name }}</h4>{{displayServiceTimes}}{{displayLocationLink}}</div>' +
						'<div class="location-link"><a href="{{campus.Url}}" class="c-btn c-btn--dark c-btn--display-block">Details<i class="nv-icon nv-icon--carat_right"></i></a></div>' +
						'</div>',
						maxWidth: undefined,
						maxHeight: undefined,
						padding: "0px",
						borderRadius: "0",
						offset: {
							top: "-30px",
							left: "0px",
							},
						border: false,
						pointer: "15px",
						shadow: {"h":"0px","v":"2px","blur":"3px","spread":"2px","opacity":0.16,"color":"#000000"},
						closeOnMapClick: true,
						closeWhenOthersOpen: true
					});

				  //extend the bounds to include each marker's position
				  bounds.extend(marker.position);
					
					marker.addListener('click', function() {
	          infoWindow.open(map, marker);
	        });
					marker.addListener('mouseover', function() {
	          infoWindow.open(map, marker);
	        });

          //infoWindow.open(map, marker); //display on load
          
				})();

		{%- endif -%}
	{%- endfor -%}

	//now fit the map to the newly inclusive bounds
	map.fitBounds(bounds);
  map.panBy(-230,0);
***/
{% endcomment %}
  
  const infoWindow = new google.maps.InfoWindow();

  // Show the information for a campus when its marker is clicked.
  map.data.addListener('click', (event) => {
    const name = event.feature.getProperty('name');
    const url = event.feature.getProperty('url');
    const serviceTimes = event.feature.getProperty('serviceTimes');
    const locationLink = event.feature.getProperty('locationLink');
    const phone = event.feature.getProperty('phone');
    const position = event.feature.getGeometry().get();
    const content = `
      <div style="padding:20px">
        <h2>${name}</h2>
        <p><b>Service Times:</b> ${serviceTimes}</p>
        <p><b>Phone:</b> ${phone}</p>
        ${locationLink}
      </div>
      <div><a href="${url}" class="c-btn c-btn--dark c-btn--display-block">Details<i class="nv-icon nv-icon--carat_right"></i></a></div>
      `;

    infoWindow.setContent(content);
    infoWindow.setPosition(position);
    infoWindow.setOptions({pixelOffset: new google.maps.Size(0, -30)});
    infoWindow.open(map);
  });

  // Build and add the search bar
  const card = document.createElement('div');
  const titleBar = document.createElement('div');
  const title = document.createElement('h2');
  const inputContainer = document.createElement('div');
  const input = document.createElement('input');
  const buttonContainer = document.createElement('div');
  const button = document.createElement('button');
  const icon = document.createElement('i');
  const panel = document.createElement('div');
  const options = {
    types: ['address'],
    componentRestrictions: {country: 'us'},
  };

  card.setAttribute('id', 'location-search');
  titleBar.setAttribute('class', 'stack');
  title.setAttribute('class', 'location-search__title');
  title.textContent = 'Join us this weekend';
  titleBar.appendChild(title);
  inputContainer.setAttribute('class', 'form-group');
  input.setAttribute('id', 'addressInput');
  input.setAttribute('class', 'form-control');
  input.setAttribute('type', 'text');
  input.setAttribute('placeholder', 'Enter Your Location');
  buttonContainer.setAttribute('class', 'form-group');
  button.setAttribute('id', 'searchButton');
  button.setAttribute('class', 'c-btn c-btn--primary c-btn--offset-border');
  button.textContent = 'Visit';
  icon.setAttribute('class', 'nv-icon nv-icon--carat_right');
  panel.setAttribute('id', 'campus-list');
  inputContainer.appendChild(input);
  button.appendChild(icon);
  buttonContainer.appendChild(button);
  card.appendChild(titleBar);
  titleBar.appendChild(inputContainer);
  titleBar.appendChild(buttonContainer);
  card.appendChild(panel);
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(card);

  // Make the search bar into a Places Autocomplete search bar and select
  // which detail fields should be returned about the place that
  // the user selects from the suggestions.
  const autocomplete = new google.maps.places.Autocomplete(input, options);

  autocomplete.setFields(
      ['address_components', 'geometry', 'name']);

  // Set the origin point when the user selects an address
  const originMarker = new google.maps.Marker({map: map});
  originMarker.setVisible(false);
  let originLocation = map.getCenter();

  autocomplete.addListener('place_changed', async () => {
    originMarker.setVisible(false);
    originLocation = map.getCenter();
    const place = autocomplete.getPlace();

    if (!place.geometry) {
      // User entered the name of a Place that was not suggested and
      // pressed the Enter key, or the Place Details request failed.
      window.alert('No address available for input: \'' + place.name + '\'');
      return;
    }

    // Recenter the map to the selected address
    originLocation = place.geometry.location;
    map.setCenter(originLocation);
    map.setZoom(9);
    console.log(place);

    originMarker.setPosition(originLocation);
    originMarker.setVisible(true);

    // Use the selected address as the origin to calculate distances
    // to each of the campus locations
    const rankedCampus = await calculateDistances(map.data, originLocation);
    showCampusList(map.data, rankedCampus);

    return;
  });
      
  }
  
/**
 * Use Distance Matrix API to calculate distance from origin to each campus.
 * @param {google.maps.Data} data The geospatial data object layer for the map
 * @param {google.maps.LatLng} origin Geographical coordinates in latitude
 * and longitude
 * @return {Promise<object[]>} n Promise fulfilled by an array of objects with
 * a distanceText, distanceVal, and campusid property, sorted ascending
 * by distanceVal.
 */
async function calculateDistances(data, origin) {
  const campuses = [];
  const destinations = [];

  // Build parallel arrays for the campus IDs and destinations
  data.forEach((campus) => {
    const campusNum = campus.getProperty('campusid');
    const campusLoc = campus.getGeometry().get();

    campuses.push(campusNum);
    destinations.push(campusLoc);
  });

  // Retrieve the distances of each campus from the origin
  // The returned list will be in the same order as the destinations list
  const service = new google.maps.DistanceMatrixService();
  const getDistanceMatrix =
    (service, parameters) => new Promise((resolve, reject) => {
      service.getDistanceMatrix(parameters, (response, status) => {
        if (status != google.maps.DistanceMatrixStatus.OK) {
          reject(response);
        } else {
          const distances = [];
          const results = response.rows[0].elements;
          for (let j = 0; j < results.length; j++) {
            const element = results[j];
            const distanceText = element.distance.text;
            const distanceVal = element.distance.value;
            const distanceObject = {
              campusid: campuses[j],
              distanceText: distanceText,
              distanceVal: distanceVal,
            };
            distances.push(distanceObject);
          }

          resolve(distances);
        }
      });
    });

  const distancesList = await getDistanceMatrix(service, {
    origins: [origin],
    destinations: destinations,
    travelMode: 'DRIVING',
    unitSystem: google.maps.UnitSystem.IMPERIAL,
  });

  distancesList.sort((first, second) => {
    return first.distanceVal - second.distanceVal;
  });

  return distancesList;
}

/**
 * Build the content of the side panel from the sorted list of campuses
 * and display it.
 * @param {google.maps.Data} data The geospatial data object layer for the map
 * @param {object[]} campuses An array of objects with a distanceText,
 * distanceVal, and campusid property.
 */
function showCampusList(data, campuses) {
  if (campuses.length == 0) {
    console.log('no locations');
    return;
  }

  let panel = document.createElement('div');
  // If the panel already exists, use it. Else, create it and add to the page.
  if (document.getElementById('campus-list')) {
    panel = document.getElementById('campus-list');
    // If panel is already open, close it
    if (panel.classList.contains('open')) {
      panel.classList.remove('open');
    }
  } else {
    panel.setAttribute('id', 'campus-list');
    const body = document.body;
    body.insertBefore(panel, body.childNodes[0]);
  }


  // Clear the previous details
  while (panel.lastChild) {
    panel.removeChild(panel.lastChild);
  }

  campuses.forEach((campus) => {
    // Add campus details with text formatting
    const name = document.createElement('p');
    name.classList.add('place');
    const currentCampus = data.getFeatureById(campus.campusid);
    name.textContent = currentCampus.getProperty('name');
    panel.appendChild(name);
    const distanceText = document.createElement('p');
    distanceText.classList.add('distanceText');
    distanceText.textContent = campus.distanceText;
    panel.appendChild(distanceText);
  });

  // Open the panel
  panel.classList.add('open');

  return;
}
</script>
<link rel="stylesheet" href="/Themes/NorthviewChurch/Assets/Scripts/snazzymaps/snazzy-info-window.min.css">
<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key={{ 'Global' | Attribute:'GoogleAPIKey' }}&libraries=places&callback=initMap" async defer></script>
<script src="/Themes/NorthviewChurch/Assets/Scripts/snazzymaps/snazzy-info-window.min.js"></script>

{{"Lava" | Debug }}