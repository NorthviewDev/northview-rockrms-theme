    <!-- Mapbox GL JS -->
    <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v1.6.1/mapbox-gl.js'></script>
    <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v1.6.1/mapbox-gl.css' rel='stylesheet' />
    <!-- Geocoder plugin -->
    <script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.2.0/mapbox-gl-geocoder.min.js'></script>
    <link rel='stylesheet' href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.2.0/mapbox-gl-geocoder.css' type='text/css' />
    <!-- Turf.js plugin -->
    <script src='https://npmcdn.com/@turf/turf/turf.min.js'></script>
    <div id="campus-locations">
      <div id='location-search' class='scroll-pane'>
      <div class='pad'>
        <div class='stack'>
          <h2 class="location-search__title">Join Us This Weekend</h2>
          <div id="address-input" class="form-group"></div>
          <div class="form-group"><button id="searchButton" type="submit" class="c-btn c-btn--primary c-btn--offset-border">Search<i class="nv-icon nv-icon--carat_right"></i></button></div>        
        </div>
        <div id='campus-list' class='listings stack'></div>
        </div>
      </div>
      <div id='campusmap' class='map'></div>
    </div>
    <script>
    $(function(){
    	var jssp_api = $('.scroll-pane').jScrollPane(
    		{
    			maintainPosition: false
    		}
    	).data('jsp');
    
      /* This will let you use the .remove() function later on */
      if (!('remove' in Element.prototype)) {
        Element.prototype.remove = function() {
          if (this.parentNode) {
              this.parentNode.removeChild(this);
          }
        };
      }

      mapboxgl.accessToken = 'pk.eyJ1IjoiYmVuZ29zaG93IiwiYSI6ImNrNW83bzVtYTBkMnYzaHF2YmJtbzZ4a2oifQ.TK9VDaAk7wQIbybffPDsJA';

      /** 
       * Add the map to the page
      */
      var map = new mapboxgl.Map({
        container: 'campusmap',
        style: 'mapbox://styles/mapbox/light-v10',
        center: [-86.1860148,40.3312223],
        zoom: 8,
        scrollZoom: false
      });

      // Add zoom and rotation controls to the map.
      map.addControl(new mapboxgl.NavigationControl());

      var stores = {
    "type": "FeatureCollection",
    "features": [
{%- cache key:'active-campus-json' duration:'3600' -%}
{%- assign campusesSorted = Campuses | Sort:'Name' -%}
{%- for campus in campusesSorted -%}
{%- assign isActive = campus.IsActive -%}
{%- assign hasLocation = campus.Location.Latitude -%}
{%- assign campusTypeId = campus.CampusTypeValueId -%}
{%- if isActive and hasLocation and campusTypeId == '1455' -%}
{%- assign serviceDay = "" -%}
{%- assign displayServiceTimes = "" -%}
{%- assign campusDescription = campus.Description | Trim -%}
{%- if campusDescription != "" -%}
{%- assign displayServiceTimes = campusDescription -%}
{%- else -%}
{%- assign serviceTimes = campus.ServiceTimes -%}
{%- capture displayServiceTimes -%}{%- for serviceTime in serviceTimes -%}{%- assign separator='' -%}{%- if forloop.length > 1 and forloop.last != true -%}{% assign separator=', ' -%}{%- endif -%}{%- assign at=' at ' -%}{{ serviceTime.Day | Pluralize}}{{ at }}{%- assign serviceDay = serviceTime.Day -%}{{ serviceTime.Time }}{{ separator }}{%- endfor -%}{%- endcapture -%}
{%- endif -%}
{%- assign campusLocation = campus.Location.Street1 | Trim -%}
{%- capture displayLocationLink -%}{%- if campusLocation != "" -%}<p class='location-link'><i class='nv-icon nv-icon--location_marker'></i><a target='_blank' href='https://www.google.com/maps/dir/?api=1&amp;destination={{campus.Location.Street1}}+{{campus.Location.City}}+{{campus.Location.State}}+{{campus.Location.PostalCode}}'>Map & Directions</a></p>{%- endif -%}{%- endcapture -%}
          {
            "geometry": {
                "type": "Point",
                "coordinates": [
                  {{ campus.Location.Longitude }},
                  {{ campus.Location.Latitude }}
                ]
            },
            "type": "Feature",
            "properties": {
                "campusid": "{{ campus.Id }}",
                "serviceTimes": "<p>{{ displayServiceTimes }}</p>",
                "locationLink": "{{ displayLocationLink }}",
                "name": "{{ campus.Name }}",
                "url": "{{ campus.Url }}",
                "address": "{{ campus.Location.Street1 }}",
                "phone": "{{ campus.PhoneNumber }}"
            }
  {%- if forloop.last -%}
        }
  {%- else -%}
        },
  {%- endif -%}
{%- endif -%}
{%- endfor -%}
{%- endcache -%}
    ]
};
      /**
       * Assign a unique id to each store. You'll use this `id`
       * later to associate each point on the map with a listing
       * in the sidebar.
      */
      stores.features.forEach(function(store, i){
        store.properties.id = i;
      });

      /**
       * Wait until the map loads to make changes to the map.
      */
      map.on('load', function (e) {
        /** 
         * This is where your '.addLayer()' used to be, instead
         * add only the source without styling a layer
        */
        map.addSource("places", {
          "type": "geojson",
          "data": stores
        });

        /** 
         * Create a new MapboxGeocoder instance.
        */
        var geocoder = new MapboxGeocoder({
            accessToken: mapboxgl.accessToken,
            mapboxgl: mapboxgl,
            marker: true,
            types: "postcode",
            country: "us",
            bbox: [-88.11601868813376,37.76202661177915,-84.75420228188288,41.7876939175587],
            placeholder:'Search by Zip Code'
        });
        
        /**
         * Add all the things to the page:
         * - The location listings on the side of the page
         * - The search box (MapboxGeocoder) onto the map
         * - The markers onto the map
        */
        buildLocationList(stores);
//        map.addControl(geocoder, 'top-left');
        document.getElementById('address-input').appendChild(geocoder.onAdd(map));
        addMarkers();

        /**
         * Listen for when a geocoder result is returned. When one is returned:
         * - Calculate distances
         * - Sort stores by distance
         * - Rebuild the listings
         * - Adjust the map camera
         * - Open a popup for the closest store
         * - Highlight the listing for the closest store.
        */
        geocoder.on('result', function(ev) {
        
          /* Get the coordinate of the search result */
          var searchResult = ev.result.geometry;

          /**
           * Calculate distances:
           * For each store, use turf.disance to calculate the distance
           * in miles between the searchResult and the store. Assign the
           * calculated value to a property called `distance`.
          */
          var options = { units: 'miles' };
          stores.features.forEach(function(store){
            Object.defineProperty(store.properties, 'distance', {
              value: turf.distance(searchResult, store.geometry, options),
              writable: true,
              enumerable: true,
              configurable: true
            });
          });

          /** 
           * Sort stores by distance from closest to the `searchResult`
           * to furthest.
          */
          stores.features.sort(function(a,b){
            if (a.properties.distance > b.properties.distance) {
              return 1;
            }
            if (a.properties.distance < b.properties.distance) {
              return -1;
            }
            return 0; // a must be equal to b
          });
          
          /** 
           * Rebuild the listings:
           * Remove the existing listings and build the location
           * list again using the newly sorted stores.
          */
          var listings = document.getElementById('campus-list');
          while (listings.firstChild) {
            listings.removeChild(listings.firstChild);
          }
          buildLocationList(stores);
        
          /* Open a popup for the closest store. */
          createPopUp(stores.features[0]);
          
          /** Highlight the listing for the closest store. */
          var activeListing = document.getElementById('listing-' + stores.features[0].properties.id);
          activeListing.classList.add('active');

          /** 
           * Adjust the map camera:
           * Get a bbox that contains both the geocoder result and
           * the closest store. Fit the bounds to that bbox.
          */
          var bbox = getBbox(stores, 0, searchResult);
          map.fitBounds(bbox, {
            padding: 100
          });
        });
      });

      /**
       * Using the coordinates (lng, lat) for
       * (1) the search result and
       * (2) the closest store
       * construct a bbox that will contain both points
      */
      function getBbox(sortedStores, storeIdentifier, searchResult) {
        var lats = [sortedStores.features[storeIdentifier].geometry.coordinates[1], searchResult.coordinates[1]]
        var lons = [sortedStores.features[storeIdentifier].geometry.coordinates[0], searchResult.coordinates[0]]
        var sortedLons = lons.sort(function(a,b){
            if (a > b) { return 1; }
            if (a.distance < b.distance) { return -1; }
            return 0;
          });
        var sortedLats = lats.sort(function(a,b){
            if (a > b) { return 1; }
            if (a.distance < b.distance) { return -1; }
            return 0;
          });
        return [
          [sortedLons[0], sortedLats[0]],
          [sortedLons[1], sortedLats[1]]
        ];
      }

      /**
       * Add a marker to the map for every store listing.
      **/
      function addMarkers() {
        /* For each feature in the GeoJSON object above: */
        stores.features.forEach(function(marker) {
          /* Create a div element for the marker. */
          var el = document.createElement('div');
          /* Assign a unique `id` to the marker. */
          el.id = "marker-" + marker.properties.id;
          /* Assign the `marker` class to each marker for styling. */
          el.className = 'marker';
          
          /**
           * Create a marker using the div element
           * defined above and add it to the map.
          **/
          new mapboxgl.Marker(el, {offset: [0, -23]})
          .setLngLat(marker.geometry.coordinates)
          .addTo(map);

          /**
           * Listen to the element and when it is clicked, do three things:
           * 1. Fly to the point
           * 2. Close all other popups and display popup for clicked store
           * 3. Highlight listing in sidebar (and remove highlight for all other listings)
          **/
          el.addEventListener('click', function(e){
                e.preventDefault();
                flyToStore(marker);
                createPopUp(marker);
                var activeItem = document.getElementsByClassName('active');
                e.stopPropagation();
                if (activeItem[0]) {
                  activeItem[0].classList.remove('active');
                }
                var listing = document.getElementById('listing-' + marker.properties.id);
                listing.classList.add('active');
          });
        });
      }

      /**
       * Add a listing for each store to the sidebar.
      **/
      function buildLocationList(data) {
        data.features.forEach(function(store, i){
          /**
           * Create a shortcut for `store.properties`,
           * which will be used several times below.
          **/
          var prop = store.properties;

          /* Add a new listing section to the sidebar. */
          var listings = document.getElementById('campus-list');
          var listing = listings.appendChild(document.createElement('div'));
          /* Assign a unique `id` to the listing. */
          listing.id = "listing-" + prop.id;
          /* Assign the `item` class to each listing for styling. */
          listing.className = 'item';

          /* Add the link to the individual listing created above. */
          var link = listing.appendChild(document.createElement('a'));
          link.href = prop.url;
          link.className = 'title';
          link.id = "link-" + prop.id;
          link.innerHTML = prop.name;

          /* Add details to the individual listing. */
          var details = listing.appendChild(document.createElement('div'));
          if (prop.distance) {
            var roundedDistance = Math.round(prop.distance*100)/100;
            details.innerHTML += '<p><strong>' + roundedDistance + ' miles away</strong></p>';
          }

          /**
           * Listen to the element and when it is clicked, do four things:
           * 1. Update the `currentFeature` to the store associated with the clicked link
           * 2. Fly to the point
           * 3. Close all other popups and display popup for clicked store
           * 4. Highlight listing in sidebar (and remove highlight for all other listings)
          **/
          link.addEventListener('click', function(e){
            var intFrameWidth = window.innerWidth;
            if (intFrameWidth >= 768) {
            e.preventDefault();
            for (var i=0; i < data.features.length; i++) {
              if (this.id === "link-" + data.features[i].properties.id) {
                var clickedListing = data.features[i];
                flyToStore(clickedListing);
                createPopUp(clickedListing);
              }
            }
            var activeItem = document.getElementsByClassName('active');
            if (activeItem[0]) {
              activeItem[0].classList.remove('active');
            }
            this.parentNode.classList.add('active');
            }
          });
        });
        jssp_api.reinitialise();
      }

      /**
       * Use Mapbox GL JS's `flyTo` to move the camera smoothly
       * a given center point.
      **/
      function flyToStore(currentFeature) {
        map.flyTo({
            center: currentFeature.geometry.coordinates,
            zoom: 8
          });
      }

      /**
       * Create a Mapbox GL JS `Popup`.
      **/
      function createPopUp(currentFeature) {
        var popUps = document.getElementsByClassName('mapboxgl-popup');
        if (popUps[0]) popUps[0].remove();

        var popup = new mapboxgl.Popup({
          closeOnClick: true,
          closeButton: true
        })
          .setLngLat(currentFeature.geometry.coordinates)
          .setHTML('<div style="padding:20px">' +
            '<h3>' + currentFeature.properties.name + '</h3>' +
            '<div class="stack" style="padding:10px 10px 0">' +
            currentFeature.properties.serviceTimes +
            currentFeature.properties.locationLink +
            '</div>' +
            '</div>' +
						'<div class="location-link"><a href="' + currentFeature.properties.url + '" class="c-btn c-btn--dark c-btn--display-block">Campus Page<i class="nv-icon nv-icon--carat_right"></i></a></div>')
          .addTo(map);
      }

        window.addEventListener("resize", jssp_api.reinitialise);

    });
</script>
